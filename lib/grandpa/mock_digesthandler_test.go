// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChainSafe/gossamer/lib/grandpa (interfaces: DigestHandler)

// Package grandpa is a generated GoMock package.
package grandpa

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDigestHandler is a mock of DigestHandler interface.
type MockDigestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDigestHandlerMockRecorder
}

// MockDigestHandlerMockRecorder is the mock recorder for MockDigestHandler.
type MockDigestHandlerMockRecorder struct {
	mock *MockDigestHandler
}

// NewMockDigestHandler creates a new mock instance.
func NewMockDigestHandler(ctrl *gomock.Controller) *MockDigestHandler {
	mock := &MockDigestHandler{ctrl: ctrl}
	mock.recorder = &MockDigestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDigestHandler) EXPECT() *MockDigestHandlerMockRecorder {
	return m.recorder
}

// NextGrandpaAuthorityChange mocks base method.
func (m *MockDigestHandler) NextGrandpaAuthorityChange() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextGrandpaAuthorityChange")
	ret0, _ := ret[0].(uint)
	return ret0
}

// NextGrandpaAuthorityChange indicates an expected call of NextGrandpaAuthorityChange.
func (mr *MockDigestHandlerMockRecorder) NextGrandpaAuthorityChange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextGrandpaAuthorityChange", reflect.TypeOf((*MockDigestHandler)(nil).NextGrandpaAuthorityChange))
}
